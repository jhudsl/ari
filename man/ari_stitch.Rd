% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ari_stitch.R
\name{ari_stitch}
\alias{ari_stitch}
\title{Generate video from images and audio}
\usage{
ari_stitch(
  images,
  audio,
  output,
  verbose = FALSE,
  cleanup = TRUE,
  ffmpeg_args = set_ffmpeg_args(),
  duration = NULL,
  check_inputs = TRUE
)
}
\arguments{
\item{images}{A vector of paths to images.}

\item{audio}{A list of \code{Wave}s from tuneR.}

\item{output}{A path to the video file which will be created.}

\item{verbose}{print diagnostic messages.  If > 1, then more are printed}

\item{cleanup}{If \code{TRUE}, interim files are deleted}

\item{ffmpeg_args}{Ffmpeg arguments set by \code{set_ffmpeg_args()}}

\item{duration}{a vector of numeric durations for each audio
track. See \code{\link{pad_wav}}}

\item{check_inputs}{Should the inputs be checked?  Almost always should
be \code{TRUE}, but may be useful if trying to do customized stuff.}
}
\value{
A logical value, with the attribute \code{outfile} for the
output file.
}
\description{
Given a vector of paths to images (preferably \code{.jpg}s
or \code{.png}s) and a flat list of \code{\link[tuneR]{Wave}}s of equal
length this function will create an \code{.mp4} video file where each image
is shown with its corresponding audio. Take a look at the
\code{\link[tuneR]{readWave}} function if you want to import your audio
files into R. Please be sure that all images have the same dimensions.
}
\details{
This function uses \href{https://ffmpeg.org/}{FFmpeg}
which you should be sure is installed before using this function. If running
\code{Sys.which("ffmpeg")} in your R console returns an empty string after
installing FFmpeg then you should set the path to FFmpeg on you computer to
an environmental variable using \code{Sys.setenv(ffmpeg = "path/to/ffmpeg")}.
The environmental variable will always override the result of
\code{Sys.which("ffmpeg")}.
}
\examples{
\dontrun{
if (ffmpeg_version_sufficient()) {
  result <- ari_stitch(
    ari_example(c("mab1.png", "mab2.png")),
    list(tuneR::noise(), tuneR::noise())
  )
  result <- ari_stitch(
    ari_example(c("mab1.png", "mab2.png")),
    list(tuneR::noise(), tuneR::noise()),
    ffmpeg_opts = "-qscale 0",
    verbose = 2
  )
  # system2("open", attributes(result)$outfile)
}
}
}
